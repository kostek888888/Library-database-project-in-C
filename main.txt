/// TITLE:
/// Library Project for Basics of Programming 2 Michael Kostecki 13A
/// Projekt biblioteki na Podstawy Programowania 2 MichaË† Kostecki 13A

/// ¹ æ ê ñ ó ³ ¿ Ÿ

/// ¹ æ ê ñ ó ³ ¿ Ÿ



#include <stdio.h>          /// default libraries headers
#include <stdlib.h>

#include "clients.h"        /// .c with clients list
#include "books.h"          /// .c with books list
#include "borrow.h"         /// .c with borrow list

#ifdef _WIN32               /// clear console compatibility definition
#define CLEAR "cls"         /// windows
#else
#define CLEAR "clear"       /// linux
#endif

    Library *base_pointer=NULL; /// pointer for structure
    Client *client_base_pointer=NULL;
    Borrow *borrow_base_pointer=NULL;


    int id=0; /// book id's
    int client_id=0;
    int borrow_id=0;


void get_book(Library *base_pointer, Client *client_base_pointer){
    char name[100];
    char surname[100];
    long long int pesel;
    char title[100];
    char author[100];
    int amount_to_borrow=0;

    Library *temporary_pointer = base_pointer;
    Client *client_temporary_pointer = client_base_pointer;

    printf("\n Wpisz imiê klienta wypo¿yczaj¹cego ksi¹¿kê: ");
    gets(name);
    gets(name);
    printf("\n Wpisz nazwisko klienta wypo¿yczaj¹cego ksi¹¿kê: ");
    gets(surname);
    gets(surname);
    printf("\n Wpisz numer PESEL klienta wypo¿yczaj¹cego ksi¹¿kê: ");
    scanf(" %lld",&pesel);
    while((strcmp(client_temporary_pointer->name,name)!=0)&&(strcmp(client_temporary_pointer->surname,surname)!=0)&&(client_temporary_pointer->pesel==pesel)&&(client_temporary_pointer!=NULL)){
        client_temporary_pointer=client_temporary_pointer->next;
    }
    if(client_temporary_pointer!=NULL){

        if(client_base_pointer->id_book3==0){
        printf("\n Wpisz nazwê ksi¹¿ki do wypo¿yczenia: ");
        gets(title);
        printf("\n Wpisz autora ksi¹¿ki do wypo¿yczenia: ");
        gets(author);

        while((strcmp(temporary_pointer->title,title)!=0)&&(strcmp(temporary_pointer->author, author)!=0)&&(temporary_pointer!=NULL))
            {
                temporary_pointer=temporary_pointer->next;
            }
        if(temporary_pointer!=NULL)
            {
                borrow_id++;

                if(temporary_pointer->copies>0)
                printf("\n Na stanie jest %4d. ksi¹¿ek, ile sztuk chcesz wypo¿yczyæ?\n",temporary_pointer->copies);
                scanf(" %d",&amount_to_borrow);
                while((amount_to_borrow<1)||(temporary_pointer->copies-amount_to_borrow<0)){
                    printf("\n Spróbowano wypo¿yczyæ nieprawid³ow¹ iloÅ›æ ksi¹¿ek, spróbuj ponownie: ");
                    scanf(" %d",&amount_to_borrow);
                }

                add_new_borrow(&borrow_base_pointer, borrow_id, client_temporary_pointer->client_id, temporary_pointer->id,  amount_to_borrow);

                temporary_pointer->copies-=amount_to_borrow;
                temporary_pointer->borrowed+=amount_to_borrow;

                if(client_base_pointer->id_book1==0)
                client_temporary_pointer->id_book1=temporary_pointer->id;
                else if(client_base_pointer->id_book2==0)
                    client_temporary_pointer->id_book2=temporary_pointer->id;
                else if(client_base_pointer->id_book3==0)
                    client_temporary_pointer->id_book3=temporary_pointer->id;
            }
            else
                printf(" Napotkano b³¹d, nie mo¿na wypo¿yczyæ ksi¹¿ki\n");
        }
    }
}





int main(void)
{
    int menu_choice=0; /// for switching

    while(menu_choice!=99) {
        printf("\n Biblioteka: Wybierz jednÂ¥ z podanych niÂ¾ej opcji\n");
        printf(" 1.  Dodaj ksiÂ¥Â¾kÂ©\n");
        printf(" 2.  UsuÃ¤ ksiÂ¥Â¾kÂ©\n");
        printf(" 3.  Edytuj ksiÂ¥Â¾kÂ©\n");
        printf(" 4.  WyËœwietl ksiÂ¥Â¾ki\n");
        printf(" 5.  Posortuj ksi¹¿ki\n");
        printf(" 6.  Wyszukaj ksiÂ¥Â¾kÂ© po jej ID\n");
        printf(" 7.  Zapisz ksiÂ¥Â¾ki do pliku\n");
        printf(" 8.  Odczytaj ksiÂ¥Â¾ki z pliku\n\n");

        printf(" 9.  Dodaj klienta\n");
        printf(" 10. UsuÃ¤ klienta\n");
        printf(" 11. Edytuj klienta\n");
        printf(" 12. WyËœwietl klientÂ¢w\n");
        printf(" 13. Posortuj klientÂ¢w\n");
        printf(" 14. Wyszukaj klienta po jego ID\n");
        printf(" 15. Zapisz klientÂ¢w do pliku\n");
        printf(" 16. Odczytaj klientÂ¢w z pliku\n\n");

        printf(" 17. Wykonaj operacjê wypo¿ycz ksi¹¿kê\n");
        printf(" 18. Wykonaj operacjê oddaj ksi¹¿kê\n");
        printf(" 19. Poka¿ wszystkie wykonane operacje\n");

        printf("\n 99. ZakoÃ¤czenie programu i zwolnienie pamiÂ©ci podrÂ©cznej\n\n");
        printf( "       TwÂ¢j wybÂ¢r: ");
        scanf("%i", &menu_choice);
        system(CLEAR);

        switch(menu_choice) {
            case 1:
                    id++;
                    add_new_book(&base_pointer, id);
                    system(CLEAR);
                    printf("\n !!! KsiÂ¥Â¾ka zostaË†a pomyËœlnie dodana do bazy !!!\n");
                    break;

            case 2:
                    delete_book(&base_pointer);
                    system(CLEAR);
                    printf(" KsiÂ¥Â¾kÂ© pomyËœlnie usuniÂ©to z bazy\n");
                    break;

            case 3:
                    system(CLEAR);
                    edit_book(base_pointer);
                    break;

            case 4:
                    cout_base(base_pointer);
                    break;

            case 5:
                    system(CLEAR);
                    sort_book_list(base_pointer);
                    break;

            case 6:
                    search_for_book(base_pointer);
                    break;

            case 7:
                    write_to_file(base_pointer);
                    system(CLEAR);
                    printf(" PomyËœlnie zapisano ksiÂ¥Â¾ki do pliku\n");
                    break;

            case 8:
                    read_file1();
                    break;
            case 9:
                    id++;
                    add_new_client(&client_base_pointer, client_id);
                    system(CLEAR);
                    printf("\n !!! PomyËœlnie dodano klienta do bazy !!!\n");
                    break;

            case 10:
                    delete_client(&client_base_pointer);
                    system(CLEAR);
                    printf(" PomyËœlnie usuniÂ©to klienta z bazy\n");
                    break;
            case 11:
                    system(CLEAR);
                    edit_client(client_base_pointer);
                    break;

            case 12:
                    cout_client_base(client_base_pointer);
                    break;

            case 13:
                    system(CLEAR);
                    sort_client_list(client_base_pointer);
                    break;

            case 14:
                    seek_for_client(client_base_pointer);
                    break;

            case 15:
                    clients_write_to_file(client_base_pointer);
                    system(CLEAR);
                    printf(" PomyËœlnie zapisano klientÂ¢w do pliku\n");
                    break;

            case 16:
                    read_file2();
                    break;
            case 17:
                    get_book(base_pointer, client_base_pointer);
                    break;
            case 18:
                    give_back_book(&borrow_base_pointer);
                    system(CLEAR);
                    cout_borrow_base(borrow_base_pointer);
                    break;
            case 19:
                    cout_borrow_base(borrow_base_pointer);
        }
    }

    system(CLEAR);
    printf(" ZapisujÂ© dane do plikÂ¢w, prosze nie wyË†Â¥czaâ€  aplikacji lub komputera...\n\n");
    write_to_file(base_pointer); ///store lists in file before exit
    clients_write_to_file(client_base_pointer);

    delete_base(&base_pointer); ///remove book base from ram
    delete_client_base(&client_base_pointer);

    system(CLEAR);
    printf(" Zapisano! DziaË†anie aplikacji zostaË†o zakoÃ¤czone, mo¿na teraz zamkn¹æ to okno\n");

    return 0;
}
